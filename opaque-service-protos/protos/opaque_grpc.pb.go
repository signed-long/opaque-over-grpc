// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: opaque.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpaqueAuthServiceClient is the client API for OpaqueAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpaqueAuthServiceClient interface {
	OpaqueRegistrationFlowRPC(ctx context.Context, opts ...grpc.CallOption) (OpaqueAuthService_OpaqueRegistrationFlowRPCClient, error)
}

type opaqueAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpaqueAuthServiceClient(cc grpc.ClientConnInterface) OpaqueAuthServiceClient {
	return &opaqueAuthServiceClient{cc}
}

func (c *opaqueAuthServiceClient) OpaqueRegistrationFlowRPC(ctx context.Context, opts ...grpc.CallOption) (OpaqueAuthService_OpaqueRegistrationFlowRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpaqueAuthService_ServiceDesc.Streams[0], "/OpaqueAuthService/OpaqueRegistrationFlowRPC", opts...)
	if err != nil {
		return nil, err
	}
	x := &opaqueAuthServiceOpaqueRegistrationFlowRPCClient{stream}
	return x, nil
}

type OpaqueAuthService_OpaqueRegistrationFlowRPCClient interface {
	Send(*RegistrationFlowMsg) error
	Recv() (*RegistrationFlowMsg, error)
	grpc.ClientStream
}

type opaqueAuthServiceOpaqueRegistrationFlowRPCClient struct {
	grpc.ClientStream
}

func (x *opaqueAuthServiceOpaqueRegistrationFlowRPCClient) Send(m *RegistrationFlowMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *opaqueAuthServiceOpaqueRegistrationFlowRPCClient) Recv() (*RegistrationFlowMsg, error) {
	m := new(RegistrationFlowMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpaqueAuthServiceServer is the server API for OpaqueAuthService service.
// All implementations must embed UnimplementedOpaqueAuthServiceServer
// for forward compatibility
type OpaqueAuthServiceServer interface {
	OpaqueRegistrationFlowRPC(OpaqueAuthService_OpaqueRegistrationFlowRPCServer) error
	mustEmbedUnimplementedOpaqueAuthServiceServer()
}

// UnimplementedOpaqueAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpaqueAuthServiceServer struct {
}

func (UnimplementedOpaqueAuthServiceServer) OpaqueRegistrationFlowRPC(OpaqueAuthService_OpaqueRegistrationFlowRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method OpaqueRegistrationFlowRPC not implemented")
}
func (UnimplementedOpaqueAuthServiceServer) mustEmbedUnimplementedOpaqueAuthServiceServer() {}

// UnsafeOpaqueAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpaqueAuthServiceServer will
// result in compilation errors.
type UnsafeOpaqueAuthServiceServer interface {
	mustEmbedUnimplementedOpaqueAuthServiceServer()
}

func RegisterOpaqueAuthServiceServer(s grpc.ServiceRegistrar, srv OpaqueAuthServiceServer) {
	s.RegisterService(&OpaqueAuthService_ServiceDesc, srv)
}

func _OpaqueAuthService_OpaqueRegistrationFlowRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OpaqueAuthServiceServer).OpaqueRegistrationFlowRPC(&opaqueAuthServiceOpaqueRegistrationFlowRPCServer{stream})
}

type OpaqueAuthService_OpaqueRegistrationFlowRPCServer interface {
	Send(*RegistrationFlowMsg) error
	Recv() (*RegistrationFlowMsg, error)
	grpc.ServerStream
}

type opaqueAuthServiceOpaqueRegistrationFlowRPCServer struct {
	grpc.ServerStream
}

func (x *opaqueAuthServiceOpaqueRegistrationFlowRPCServer) Send(m *RegistrationFlowMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *opaqueAuthServiceOpaqueRegistrationFlowRPCServer) Recv() (*RegistrationFlowMsg, error) {
	m := new(RegistrationFlowMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpaqueAuthService_ServiceDesc is the grpc.ServiceDesc for OpaqueAuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpaqueAuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OpaqueAuthService",
	HandlerType: (*OpaqueAuthServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpaqueRegistrationFlowRPC",
			Handler:       _OpaqueAuthService_OpaqueRegistrationFlowRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "opaque.proto",
}
